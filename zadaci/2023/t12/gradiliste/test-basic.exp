#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Nov 19 00:58:11 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./a.out
match_max 100000
expect -exact "Unesite broj dana radova: "
send -- "5\r"
expect -exact "5\r
Unesite potrosenu kolicinu maltera u kg za 1. dan: "
send -- "2.5\r"
expect -exact "2.5\r
Unesite potrosenu kolicinu maltera u kg za 2. dan: "
send -- "3.8\r"
expect -exact "3.8\r
Unesite potrosenu kolicinu maltera u kg za 3. dan: "
send -- "4.7\r"
expect -exact "4.7\r
Unesite potrosenu kolicinu maltera u kg za 4. dan: "
send -- "8.2\r"
expect -exact "8.2\r
Unesite potrosenu kolicinu maltera u kg za 5. dan: "
send -- "9.1\r"
expect -exact "9.1\r
Unesite potrosenu kolicinu cigle u komadima za 1. dan: "
send -- "30\r"
expect -exact "30\r
Unesite potrosenu kolicinu cigle u komadima za 2. dan: "
send -- "24\r"
expect -exact "24\r
Unesite potrosenu kolicinu cigle u komadima za 3. dan: "
send -- "32\r"
expect -exact "32\r
Unesite potrosenu kolicinu cigle u komadima za 4. dan: "
send -- "56\r"
expect -exact "56\r
Unesite potrosenu kolicinu cigle u komadima za 5. dan: "
send -- "32\r"
expect -exact "32\r
Unesite potrosenu kolicinu crepa u komadima za 1. dan: "
send -- "87\r"
expect -exact "87\r
Unesite potrosenu kolicinu crepa u komadima za 2. dan: "
send -- "43\r"
expect -exact "43\r
Unesite potrosenu kolicinu crepa u komadima za 3. dan: "
send -- "67\r"
expect -exact "67\r
Unesite potrosenu kolicinu crepa u komadima za 4. dan: "
send -- "32\r"
expect -exact "32\r
Unesite potrosenu kolicinu crepa u komadima za 5. dan: "
send -- "56\r"
expect -exact "56\r
Uneti cenu maltera po kilogramu: "
send -- "12.5\r"
expect -exact "12.5\r
Uneti cenu cigle po komadu: "
send -- "31\r"
expect -exact "31\r
Uneti cenu crepa po komadu: "
send -- "40\r"
expect -exact "17147.75"
expect -exact "34.80"
expect -exact "119.50"
expect -exact "1."
expect eof
