#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Nov 22 00:47:52 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./a.out
match_max 100000
expect -exact "Unesite broj elemenata niza M (broj elemenata ne sme da prelazi 25): "
send -- "5\r"
expect -exact "5\r
\r
Unesite elemente niza M:\r
M\[0\]="
send -- "2.1\r"
expect -exact "2.1\r
M\[1\]="
send -- "5.6\r"
expect -exact "5.6\r
M\[2\]="
send -- "5.8\r"
expect -exact "5.8\r
M\[3\]="
send -- "5.3\r"
expect -exact "5.3\r
M\[4\]="
send -- "8"
expect -exact " "
send -- "9.0\r"
expect -exact "9.0\r
Povrsina najveceg kruga iznosi 81.00, nalazi se na 4 indeksu.\r
Unesite realan pozitivan broj a:"
send -- "5.7\r"
expect eof
