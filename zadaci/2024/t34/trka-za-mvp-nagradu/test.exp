#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri May  3 01:32:56 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./a.out 72

send -- "6\r"
send -- "Jokic 	2085 	976 	708 	79\r"
send -- "Curry 	1956 	330 	379 	74\r"
send -- "LeBron	1822 	518 	589 	71\r"
send -- "Embiid	1353 	430 	219 	39\r"
send -- "Durant	2032 	495 	378 	75\r"
send -- "Doncic	2370 	647 	686 	70\r"

expect -exact "   Doncic(-)       2370        647        686         70      52.90"
expect -exact "   Embiid(-)       1353        430        219         39      51.33"
expect -exact "    Jokic(*)       2085        976        708         79      47.71"
expect -exact "   LeBron(-)       1822        518        589         71      41.25"
expect -exact "      Durant       2032        495        378         75      38.73"
expect -exact "       Curry       1956        330        379         74      36.01"

expect -exact "Prosecna efikasnost igraca je: 44.66"

match_max 100000
